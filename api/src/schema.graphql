# Anytime you make a change to this file, run get-schema

# import UserOrderByInput, CharacterOrderByInput from './generated/prisma.graphql'

type User {
    id: ID!
    name: String!
    email: String
    password: String!
    characters: [Character!]!
    updatedAt: String!
    createdAt: String!
}

type Character {
    id: ID! 
    name: String!
    gender: Gender!
    age: Int!
    height: Int!
    weight: Int!
    alignment: Alignment!
    deity: String
    race: Race!
    class: Class!
    owner: User! 
}

type Query {
    users(query: String, first: Int, skip: Int, after: String, orderBy: UserOrderByInput): [User!]!
    me: User!
    myCharacters(query: String, first: Int, skip: Int, after: String, orderBy: CharacterOrderByInput): [Character!]!
}

type Mutation {
    createUser(data: CreateUserInput!): AuthPayload!
    login(data: LoginUserInput!): AuthPayload!
    updateUser(data: UpdateUserInput!): User!
    deleteUser: User!
    createCharacter(data: CreateCharacterInput!): Character!
    updateCharacter(id: ID!, data: UpdateCharacterInput!): Character!
    deleteCharacter(id:ID!): Character!
}

# type Subscription {

# }

type AuthPayload {
    token: String!
    user: User!
}

input CreateUserInput {
    name: String!
    email: String!
    password: String!
}

input LoginUserInput {
    email: String!
    password: String!
}

input UpdateUserInput {
    name: String
    email: String
    password: String
}

input CreateCharacterInput {
    name: String!
    gender: Gender!
    age: Int!
    height: Int!
    weight: Int!
    alignment: Alignment!
    race: ID!
    class: ID!
    deity: String
}

input UpdateCharacterInput {
    name: String
    gender: Gender
    age: Int
    height: Int
    weight: Int
    alignment: Alignment
    race: ID
    class: ID
    deity: String
}

enum MutationType {
    CREATED
    UPDATED
    DELETED
}

